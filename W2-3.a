_start: clear R0 ;
	clear R1 ;
	clear R2 ;
	loadi R0 IO ;
	loadc R1 0 ;
	seq R2 R1 R0 ;
	move R3 R2 ;
	jmpp R3 _add ;
	loadc R1 1 ;
	seq R2 R1 R0 ;
	jmpp R2 _sub ;
        loadc R1 2 ;
	seq R2 R1 R0 ;
	jmpp R2 _mul ;
        loadc R1 3 ;
	seq R2 R1 R0 ;
	jmpp R2 _div ;
        loadc R1 4 ;
	seq R2 R1 R0 ;
	jmpp R2 _slt ;
	loadc R1 5 ;
	seq R2 R1 R0 ;
	jmpp R2 _exit ;
_add:   loadi R0 IO ;
        storeSp R0 0 ; 
        loadi R0 IO ;
        storeSp R0 -2 ; 
        loadSp R2 0 ;
	loadSp R1 -2 ;
	add R1 R2 ;
	storei R1 IO ;
        jump _start ;
_sub:   loadi R0 IO ;
        storeSp R0 0 ; 
        loadi R0 IO ;
        storeSp R0 -2 ; 
        loadSp R1 0 ;
	loadSp R2 -2 ;
        subtract R1 R2 ;
	storei R1 IO ;
        jump _start ;
_mul:   loadi R0 IO ;
        storeSp R0 0 ; 
        loadi R0 IO ;
        storeSp R0 -2 ; 
        loadSp R2 0 ;
	loadSp R1 -2 ;
        multiply R1 R2 ;
	storei R1 IO ;
        jump _start ;
_div:   loadi R0 IO ;
        storeSp R0 0 ; 
        loadi R0 IO ;
        storeSp R0 -2 ; 
        loadSp R1 0 ;
	loadSp R2 -2 ;
        divide R1 R2 ;
	storei R1 IO ;
        jump _start ;
_slt:   loadi R0 IO ;
        storeSp R0 0 ; 
        loadi R0 IO ;
        storeSp R0 -2 ; 
        loadSp R1 0 ;
	loadSp R2 -2 ;
        slt R0 R1 R2 ;
	storei R0 IO ;
        jump _start ;
_exit:  exit ;
