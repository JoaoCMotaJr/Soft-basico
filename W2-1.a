loadi R3 negOne	; load -1 -> R3
loadi R0 IO	; read n -> R0
loadi R1 IO	; read m -> R1
jmpn R1 _fixSign	; if m < 0 jump to fixSign
jump _clearR2	; jump to clear
_fixSign: move R2 R1	; fixSign: m -> R2
subtract R1 R1	; R1 = R1 - R1 = 0
subtract R1 R2	; R1 = R1 - R2 = -m (= abs(m))
storei R3 sign	; store -1 into sign
_clearR2: subtract R2 R2
_Start: jmpz R1 _Done
add R2 R0	; add n to the sum in R2
loadi R7 one
subtract R1 R7
jump _Start	; go back to Start
_Done: loadi R0 sign ; Done: load the sign into R0
jmpn R0 _neg	; if sign < 0 jump to neg
jump _pos 
_neg: subtract R1 R2	; neg: R1 = R1-R2 = -sum
move R2 R1	; copy R1 into R2
_pos: storei R2 IO	; pos: output the final sum in R2
exit
negOne: .data 2 -1	; negOne: constant -1
sign: .data 2 1	; sign: (1 or -1)
one: .data 2 1	; constant 1

